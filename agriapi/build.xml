<?xml version="1.0" encoding="UTF-8"?>
<project name="qgisagri.agriapi" xmlns:ivy="antlib:fr.jayasoft.ivy.ant" default="distribution">
	<description>Build file per componente qgisagri.agriapi</description>

	<property environment="env" />

	<target name="resolve-dependencies" description="carica le librerie dal repository remoto">
		<ivy:configure file="buildfiles/ivyconf.xml" />
		<ivy:resolve file="buildfiles/ivy.xml" />
	</target>

	<target name="load-dependencies" depends="resolve-dependencies, clean-lib" description="Risolve le dipendenze esterne.">
		<ivy:retrieve pattern="lib/[artifact].[type]" />
	</target>
	
	<target name="load-properties">
		<echo message="Loading build properties..." />
		<property file="buildfiles/build.properties" />
    <tstamp />
		<!-- Se non Ã¨ stato indicato il target si imposta di default tst-rp-01 -->
		<condition property="target" value="tst-rp-01">
			<not>
				<isset property="target" />
			</not>
		</condition>
		<loadproperties srcFile="buildfiles/${target}.properties" />
	</target>

	<target name="init" depends="load-properties">
		<path id="ref.classpath">
			<fileset dir="${dir.lib}" includes="*.jar" />
		</path>
		<mkdir dir="${dir.build}" />
	</target>

	<target name="distribution-jenkins" unless="env.XDOCLET_VERSION" >
    <echo message="Eseguo target 'distribution-jenkins'"/>
    <antcall target="clean-all" />
    <antcall target="package-all" />
	</target>

	<target name="distribution-rm" if="env.XDOCLET_VERSION" depends="init">
    <echo message="Eseguo target 'distribution-rm'"/>
		<delete dir="${dir.dist.target}" />
		<mkdir dir="${dir.dist.target}" />
		<tar tarfile="${dir.dist.target}/${app.componente}-${app.version}.tar" basedir="buildfiles" includes="ADAdeploy.txt" />
	</target>

	<target name="distribution">
    <echo message="env.XDOCLET_VERSION = ${env.XDOCLET_VERSION}"/>
    <antcall target="distribution-rm" />
    <antcall target="distribution-jenkins" />
	</target>

	<target name="java-environment" depends="init">
		<delete dir="${dir.classes}" />
		<mkdir dir="${dir.classes}" />
		<delete dir="${dir.temp.src}" />
		<mkdir dir="${dir.temp.src}" />
		<copy todir="${dir.temp.src}">
			<fileset dir="${dir.src.java}" includes="**/*.java" />
		</copy>
		
	    <replaceregexp encoding="iso8859-15" match="BASE_URL_QGIS(.)*=(.)*" replace="BASE_URL_QGIS = &quot;${agriwellweb.context}&quot;;" flags="im" byline="false" file="${dir.temp.src}/it/csi/qgisagri/agriapi/util/AgriApiConstants.java" />
		<replaceregexp encoding="iso8859-15" match="BASE_URL_CONTROCAMPO(.)*=(.)*" replace="BASE_URL_CONTROCAMPO = &quot;${controcampo.context}&quot;;" flags="im" byline="false" file="${dir.temp.src}/it/csi/qgisagri/agriapi/util/AgriApiConstants.java" />
 
 
	</target>

	<target name="compile-all" depends="init, load-dependencies, java-environment" description="Compila i sorgenti nella build directory">
		<mkdir dir="${dir.classes}" />
		<javac srcdir="${dir.temp.src}" classpathref="ref.classpath" destdir="${dir.classes}" optimize="on" deprecation="on" fork="true" encoding="iso8859-15" memoryInitialSize="128m" memoryMaximumSize="512m" includeantruntime="false">
		</javac>
    <copy todir="${dir.classes}">
			<fileset dir="${dir.conf.web}" includes="*.xml,*.properties" />
		</copy>
	</target>

	<target name="web-environment">
		<echo>Copying web configuration files from ${dir.conf.webinf} to temporary directory ${dir.temp.webinf}</echo>
		<mkdir dir="${dir.temp.webinf}" />
		<copy todir="${dir.temp.webinf}">
			<fileset dir="${dir.conf.webinf}" includes="*.xml,*.tld,**/*.properties" />
		</copy>
		<replaceregexp match="(&lt;param-name&gt;remincl.resource.provider.portal&lt;/param-name&gt;[^&lt;]*&lt;param-value&gt;)[^&lt;]*(&lt;/param-value&gt;)" replace="\1${remincl.resource.provider.portal}\2" flags="s" byline="false" file="${file.temp.webxml}" />
	</target>

	<target name="package-war" depends="init, compile-all, web-environment">
		<mkdir dir="${dir.archive.target}" />
		 <!--Copio i file di properties (essenzialmente solo config.properties) -->
		<copy todir="${dir.classes}">
			<fileset dir="${dir.conf.application}" includes="*.properties" />
		</copy>
			<!-- e rimpiazzo i valori -->
		<replaceregexp match="(\\b)*papuaserv.profilazione.rest.baseurl(.)+" replace="papuaserv.profilazione.rest.baseurl=${papuaserv.profilazione.rest.baseurl}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		<replaceregexp match="(\\b)*papuaserv.messaggistica.wsdl.server1(.)+" replace="papuaserv.messaggistica.wsdl.server1=${papuaserv.messaggistica.wsdl.server1}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		<replaceregexp match="(\\b)*papuaserv.messaggistica.wsdl.server2(.)+" replace="papuaserv.messaggistica.wsdl.server2=${papuaserv.messaggistica.wsdl.server2}" flags="m" byline="true">
			<fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		<fail unless="siapcomm.wsdl" />
		<replaceregexp match="(\\b)*siapcomm.wsdl(.)+" replace="siapcomm.wsdl=${siapcomm.wsdl}" flags="m" byline="true">
		  <fileset dir="${dir.classes}" includes="config.properties" />
		</replaceregexp>
		
		<echo>Going to replace &lt;context-root&gt; with ${context.root} in war file jbossweb</echo>
		<replaceregexp match="(&lt;context-root&gt;).*(&lt;/context-root&gt;)" replace="\1${context.root}\2" flags="s" byline="false" file="${file.war.jbossweb}" />
		
		
		<echo>Creating web archive ${war.archive}</echo>
		<war basedir="${dir.src.web}" warfile="${war.archive}" excludes="**/*.class" webxml="${file.temp.webxml}">
			<webinf dir="${dir.temp.webinf}" excludes="/jsp/**,/include/**" />
      <classes dir="${dir.classes}" includes="**/**" />
			<lib dir="${dir.lib}" excludes="${war.lib.excludes}" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />
        <attribute name="ComponentName" value="${app.componente}" />
				<attribute name="ComponentVersion" value="${app.version}" />
        <!-- IMPORTANTE -->
        <attribute name="Dependencies" value="com.oracle" />				
			</manifest>
		</war>
	</target>

	<target name="ear-environment">
		<echo>Copying ear configuration files from ${dir.conf.ear} to temporary directory ${dir.temp.ear}</echo>
		<mkdir dir="${dir.temp.ear}" />
		<copy todir="${dir.temp.ear}">
			<fileset dir="${dir.conf.ear}" includes="*.xml" />
		</copy>
		<echo>Going to replace &lt;context-root&gt; with ${context.root} in temporary file ${file.temp.applicationxml}</echo>
		<replaceregexp match="(&lt;context-root&gt;).*(&lt;/context-root&gt;)" replace="\1${context.root}\2" flags="s" byline="false" file="${file.temp.applicationxml}" />
		
	</target>


	<target name="package-ear" depends="package-war, ear-environment" description="Costruisce l'ear per un ambiente">
		<ear appxml="${file.temp.applicationxml}" earfile="${ear.archive}">
			<fileset dir="${dir.archive.target}" includes="${war.name}" />
			<zipfileset dir="${dir.lib}" includes="${ear.lib.includes}" prefix="lib" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Target" value="${target}" />
				<attribute name="ComponentName" value="${app.componente}" />
				<attribute name="ComponentVersion" value="${app.version}" />
			</manifest>
		</ear>
	</target>

	<target name="package-all" depends="package-ear" description="Ccrea tutti gli archivi per un ambiente">
		<delete dir="${dir.dist.target}" />
		<mkdir dir="${dir.dist.target}" />
		<tar destfile="${dir.dist.target}/${app.componente}-${app.version}.tar">
			<tarfileset dir="${dir.archive.target}" includes="${ear.name}" />
		</tar>
	</target>

	<target name="clean-cache" depends="load-properties" description="Cancella la directory build/cache creata da Ivy con il download delle dipendenze">
		<echo>Deleting dir ${dir.cache}</echo>
		<delete dir="${dir.cache}" />
	</target>

	<target name="clean-temp" depends="load-properties" description="Cancella la directory build/temp creata da Ant">
		<echo>Deleting dir ${dir.temp}</echo>
		<delete dir="${dir.temp}" />
	</target>

	<target name="clean-classes" depends="load-properties" description="Cancella la directory build/classes creata da Ant contenente i file .class ottenuti dalla compilazione del sorgente Java">
		<delete dir="${dir.classes}" />
	</target>

	<target name="clean-archive" depends="load-properties" description="Cancella la directory build/dist creata da Ant contenente tutti gli archivi generati dai target">
		<delete dir="${dir.archive}" />
	</target>

	<target name="clean-dist" depends="load-properties">
		<delete dir="${dir.dist.target}" />
	</target>

	<target name="clean-lib" depends="load-properties">
		<delete dir="${dir.lib}" />
	</target>

	<target name="clean-all" depends="clean-temp, clean-cache, clean-lib, clean-classes, clean-archive, clean-dist" description="Cancella tutte le directory create da Ant ad eccezione della cache di Ivy" />

	<target name="packageVersion">
		<antversion property="antversion"/>
		<propertyfile file="${dir.classes}/version.properties">
		  <entry key="Ant-Version"   type="string"  value="${ant.version}" />
		  <entry key="Created-By"   type="string"  value="${java.version}" />
		  <entry key="Built-By"   type="string"  value="${user.name}" />
		  <entry key="Built-Date"    type="date" value="${DSTAMP}" />
		  <entry key="Target"    type="string" value="${target}" />
		  <entry key="ComponentName"    type="string" value="${app.componente}" />
		  <entry key="ComponentVersion"    type="string" value="${app.version}" />
		</propertyfile>
	</target>
</project>